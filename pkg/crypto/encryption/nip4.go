package encryption

import (
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	"encoding/base64"
	"encoding/hex"
	"strings"

	btcec "ec.mleku.dev/v2"
	secp "ec.mleku.dev/v2/secp256k1"
	"lukechampine.com/frand"
)

// ComputeSharedSecret returns a shared secret key used to encrypt messages.
// The private and public keys should be hex encoded.
// Uses the Diffie-Hellman key exchange (ECDH) (RFC 4753).
func ComputeSharedSecret(pub, sk string) (sharedSecret []byte, err error) {
	var privKeyBytes, pubKeyBytes B
	if privKeyBytes, err = hex.DecodeString(sk); chk.E(err) {
		err = errorf.E("error decoding sender private key: %w", err)
		return
	}
	privKey, _ := btcec.PrivKeyFromBytes(privKeyBytes)
	// appending 02 to signal that this is a compressed public key (33 bytes)
	if pubKeyBytes, err = hex.DecodeString("02" + pub); chk.E(err) {
		err = errorf.E("error decoding hex string of receiver public key '%s': %w", "02"+pub, err)
		return
	}
	var pubKey *btcec.PublicKey
	if pubKey, err = btcec.ParsePubKey(pubKeyBytes); chk.E(err) {
		err = errorf.E("error parsing receiver public key '%s': %w", "02"+pub, err)
		return
	}
	return btcec.GenerateSharedSecret(privKey, pubKey), nil
}

// ComputeSharedSecretFromBytes returns a shared secret key used to encrypt messages. Uses the Diffie-Hellman key
// exchange (ECDH) (RFC 4753).
func ComputeSharedSecretFromBytes(pkb, skb B) (secret []byte, err error) {
	privKey, _ := btcec.PrivKeyFromBytes(skb)
	// appending 02 to signal that this is a compressed public key (33 bytes)
	pkb = append(B{2}, pkb...)
	var pubKey *btcec.PublicKey
	if pubKey, err = btcec.ParsePubKey(pkb); chk.E(err) {
		err = errorf.E("error parsing receiver public key '%0x': %w", pkb, err)
		return
	}
	secret = btcec.GenerateSharedSecret(privKey, pubKey)
	return
}

func GenerateSharedSecret(s *secp.SecretKey, p *secp.PublicKey) []byte {
	return secp.GenerateSharedSecret(s, p)
}

// EncryptNip4 encrypts message with key using aes-256-cbc. key should be the shared
// secret generated by ComputeSharedSecret.
//
// Returns: base64(encrypted_bytes) + "?iv=" + base64(initialization_vector).
//
// Deprecated: upgrade to using Decrypt with the NIP-44 algorithm.
func EncryptNip4(message string, key []byte) (B, E) {
	// block size is 16 bytes
	iv := make([]byte, 16)
	if _, err := frand.Read(iv); err != nil {
		return nil, errorf.E("error creating initization vector: %w", err)
	}
	// automatically picks aes-256 based on key length (32 bytes)
	block, err := aes.NewCipher(key)
	if err != nil {
		return nil, errorf.E("error creating block cipher: %w", err)
	}
	mode := cipher.NewCBCEncrypter(block, iv)
	plaintext := []byte(message)
	// add padding
	base := len(plaintext)
	// this will be a number between 1 and 16 (inclusive), never 0
	bs := block.BlockSize()
	padding := bs - base%bs
	// encode the padding in all the padding bytes themselves
	padText := bytes.Repeat([]byte{byte(padding)}, padding)
	paddedMsgBytes := append(plaintext, padText...)
	ciphertext := make([]byte, len(paddedMsgBytes))
	mode.CryptBlocks(ciphertext, paddedMsgBytes)
	return B(base64.StdEncoding.EncodeToString(ciphertext) + "?iv=" +
		base64.StdEncoding.EncodeToString(iv)), nil
}

// DecryptNip4 decrypts a content string using the shared secret key.
// The inverse operation to message -> EncryptNip4(message, key).
//
// Deprecated: upgrade to using Decrypt with the NIP-44 algorithm.
func DecryptNip4(content string, key []byte) ([]byte, error) {
	parts := strings.Split(content, "?iv=")
	if len(parts) < 2 {
		return nil, errorf.E(
			"error parsing encrypted message: no initialization vector")
	}
	ciphertext, err := base64.StdEncoding.DecodeString(parts[0])
	if err != nil {
		return nil, errorf.E(
			"error decoding ciphertext from base64: %w", err)
	}
	var iv []byte
	iv, err = base64.StdEncoding.DecodeString(parts[1])
	if err != nil {
		return nil, errorf.E("error decoding iv from base64: %w", err)
	}
	var block cipher.Block
	block, err = aes.NewCipher(key)
	if err != nil {
		return nil, errorf.E("error creating block cipher: %w", err)
	}
	mode := cipher.NewCBCDecrypter(block, iv)
	plaintext := make([]byte, len(ciphertext))
	mode.CryptBlocks(plaintext, ciphertext)
	// remove padding
	var (
		message      = plaintext
		plaintextLen = len(plaintext)
	)
	if plaintextLen > 0 {
		// the padding amount is encoded in the padding bytes themselves
		padding := int(plaintext[plaintextLen-1])
		if padding > plaintextLen {
			return nil, errorf.E("invalid padding amount: %d", padding)
		}
		message = plaintext[0 : plaintextLen-padding]
	}
	return message, nil
}
