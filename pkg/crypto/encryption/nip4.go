package encryption

import (
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	"encoding/base64"
	"strings"

	"ec.mleku.dev/v2/schnorr"
	secp "ec.mleku.dev/v2/secp256k1"
	b32 "git.replicatr.dev/pkg/codec/bech32encoding"
	"git.replicatr.dev/pkg/util/hex"
	"lukechampine.com/frand"
)

// ComputeSharedSecret computes an Elliptic Curve Diffie Hellman shared secret out of one public key and another secret
// key.
//
// The main thing this function actually does is automatically recognise whether the keys are in hex, bech32 or raw
// binary, and use them accordingly, both can be in a different but valid encoding. All will be checked to be valid as
// secp256k1 secret keys.
func ComputeSharedSecret(sec, pub B) (secret B, err E) {
	var s *secp.SecretKey
	var p *secp.PublicKey
	switch {
	case len(sec) == secp.SecKeyBytesLen:
		s = secp.SecKeyFromBytes(sec)
	case len(sec) == secp.SecKeyBytesLen*2:
		var sb B
		if _, err = hex.DecBytes(sb, sec); chk.E(err) {
			return
		}
		s = secp.SecKeyFromBytes(sec)
	case len(sec) <= b32.MinKeyStringLen:
		if s, err = b32.NsecToSecretKey(sec); chk.E(err) {
			return
		}
	default:
		err = errorf.E("unable to decode secret key for ECDH")
		return
	}
	if s == nil {
		err = errorf.E("invalid secret key for ECDH %0x", sec)
		return
	}
	switch {
	case len(pub) == schnorr.PubKeyBytesLen:
		if p, err = schnorr.ParsePubKey(pub); chk.E(err) {
			return
		}
	case len(pub) == schnorr.PubKeyBytesLen*2:
		var pb B
		if _, err = hex.DecBytes(pb, sec); chk.E(err) {
			return
		}
		if p, err = schnorr.ParsePubKey(pb); chk.E(err) {
			return
		}
	case len(pub) <= b32.MinKeyStringLen:
		if p, err = b32.NpubToPublicKey(pub); chk.E(err) {
			return
		}
	default:
		err = errorf.E("unable to decode public key for ECDH")
		return
	}
	return secp.GenerateSharedSecret(s, p), err
}

func GenerateSharedSecret(s *secp.SecretKey, p *secp.PublicKey) []byte {
	return secp.GenerateSharedSecret(s, p)
}

// EncryptNip4 encrypts message with key using aes-256-cbc. key should be the shared
// secret generated by ComputeSharedSecret.
//
// Returns: base64(encrypted_bytes) + "?iv=" + base64(initialization_vector).
//
// Deprecated: upgrade to using Decrypt with the NIP-44 algorithm.
func EncryptNip4(message string, key []byte) (B, E) {
	// block size is 16 bytes
	iv := make([]byte, 16)
	if _, err := frand.Read(iv); err != nil {
		return nil, errorf.E("error creating initization vector: %w", err)
	}
	// automatically picks aes-256 based on key length (32 bytes)
	block, err := aes.NewCipher(key)
	if err != nil {
		return nil, errorf.E("error creating block cipher: %w", err)
	}
	mode := cipher.NewCBCEncrypter(block, iv)
	plaintext := []byte(message)
	// add padding
	base := len(plaintext)
	// this will be a number between 1 and 16 (inclusive), never 0
	bs := block.BlockSize()
	padding := bs - base%bs
	// encode the padding in all the padding bytes themselves
	padText := bytes.Repeat([]byte{byte(padding)}, padding)
	paddedMsgBytes := append(plaintext, padText...)
	ciphertext := make([]byte, len(paddedMsgBytes))
	mode.CryptBlocks(ciphertext, paddedMsgBytes)
	return B(base64.StdEncoding.EncodeToString(ciphertext) + "?iv=" +
		base64.StdEncoding.EncodeToString(iv)), nil
}

// DecryptNip4 decrypts a content string using the shared secret key.
// The inverse operation to message -> EncryptNip4(message, key).
//
// Deprecated: upgrade to using Decrypt with the NIP-44 algorithm.
func DecryptNip4(content string, key []byte) ([]byte, error) {
	parts := strings.Split(content, "?iv=")
	if len(parts) < 2 {
		return nil, errorf.E(
			"error parsing encrypted message: no initialization vector")
	}
	ciphertext, err := base64.StdEncoding.DecodeString(parts[0])
	if err != nil {
		return nil, errorf.E(
			"error decoding ciphertext from base64: %w", err)
	}
	var iv []byte
	iv, err = base64.StdEncoding.DecodeString(parts[1])
	if err != nil {
		return nil, errorf.E("error decoding iv from base64: %w", err)
	}
	var block cipher.Block
	block, err = aes.NewCipher(key)
	if err != nil {
		return nil, errorf.E("error creating block cipher: %w", err)
	}
	mode := cipher.NewCBCDecrypter(block, iv)
	plaintext := make([]byte, len(ciphertext))
	mode.CryptBlocks(plaintext, ciphertext)
	// remove padding
	var (
		message      = plaintext
		plaintextLen = len(plaintext)
	)
	if plaintextLen > 0 {
		// the padding amount is encoded in the padding bytes themselves
		padding := int(plaintext[plaintextLen-1])
		if padding > plaintextLen {
			return nil, errorf.E("invalid padding amount: %d", padding)
		}
		message = plaintext[0 : plaintextLen-padding]
	}
	return message, nil
}
